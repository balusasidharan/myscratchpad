curl https://start.spring.io/starter.zip \
    -d groupId=com.example \
    -d artifactId=spring-boot-cxf-rs \
    -d name="SpringBootCxfRs" \
    -d description="Demo Spring Boot + CXF JAX-RS project" \
    -d javaVersion=17 \
    -d packaging=jar \
    -d type=maven-project \
    -d dependencies=web \
    -o spring-boot-cxf-rs.zip

package com.example.springbootcxfrs;

import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;

@Path("/hello")
public class HelloResource {

    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public String sayHello() {
        return "Hello from Spring Boot + CXF JAX-RS!";
    }
}


@@@@@@@


package com.example.springbootcxfrs;

import org.apache.cxf.jaxrs.JAXRSServerFactoryBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.Collections;

@Configuration
public class CxfConfig {

    @Bean
    public JAXRSServerFactoryBean jaxRsServer(HelloResource helloResource) {
        JAXRSServerFactoryBean factory = new JAXRSServerFactoryBean();
        factory.setServiceBeans(Collections.singletonList(helloResource));
        // The address where CXF will serve this resource
        factory.setAddress("/api");  
        return factory;
    }
}




######


package com.example.springbootcxfrs;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.web.server.LocalServerPort;
import org.springframework.boot.test.web.client.TestRestTemplate;
import static org.junit.jupiter.api.Assertions.*;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
class HelloResourceIntegrationTest {

    @LocalServerPort
    private int port;

    @Autowired
    private TestRestTemplate restTemplate;

    @Test
    void testHelloEndpoint() {
        // Build the local URL, e.g., http://localhost:12345/api/hello
        String url = "http://localhost:" + port + "/api/hello";

        // Perform GET request
        String response = restTemplate.getForObject(url, String.class);

        // Check that the response contains your expected text
        assertTrue(response.contains("Hello from Spring Boot + CXF JAX-RS"),
                   "Response should contain the expected greeting");
    }
}



package com.example.springbootcxfrs.client;

import org.apache.cxf.feature.Feature;
import org.apache.cxf.feature.LoggingFeature;
import org.apache.cxf.feature.LoggingFeature.Verbosity;
import org.apache.cxf.feature.GZIPFeature;
import org.apache.cxf.jaxrs.client.WebClient;
import org.apache.cxf.jaxrs.provider.json.JacksonJsonProvider;

import javax.ws.rs.core.MediaType;
import java.util.Arrays;
import java.util.List;

/**
 * A simple CXF client that calls the Open Library "Works" API
 * and fetches JSON data for a given work ID.
 */
public class OpenLibraryClient {

    private static final String BASE_URL = "https://openlibrary.org";

    public Work getWorkById(String workId) {
        // Create the GZip + Logging features
        List<Feature> features = Arrays.asList(
            createLoggingFeature(),
            new GZIPFeature()
        );

        // Create a WebClient, passing in JacksonJsonProvider + features
        WebClient client = WebClient.create(
            BASE_URL,
            Arrays.asList(new JacksonJsonProvider()),
            features,
            null
        );

        // Example path: /works/OL45883W.json
        client.path("/works/{workId}.json", workId);

        // Accept JSON
        client.accept(MediaType.APPLICATION_JSON);

        // GET request, parse JSON into our "Work" model
        return client.get(Work.class);
    }

    private LoggingFeature createLoggingFeature() {
        LoggingFeature lf = new LoggingFeature();
        lf.setPrettyLogging(true);
        lf.setVerbosity(Verbosity.PAYLOAD_ANY);
        return lf;
    }
}
